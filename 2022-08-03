동기와 비동기, 블로킹과 논 블로킹
동기와 비동기, 블로킹과 논 블로킹이라는 네 개의 용어가 노드에서 혼용되고 있으며, 의미도 서로 다릅니다.
동기와 비동기 : 백그라운드 작업 완료 확인 여부
블로킹과 논 블로킹 : 함수가 바로 return 되는지 여부
노드에서는 동기-블로킹 방식과 비동기-논 블로킹 방식이 대부분입니다. 동기-논 블로킹이나 비동기-블로킹은
없다고 봐도 됩니다.

동기-블로킹 방식에서는 백그라운드 작업 완료 여부를 계속 확인하며, 호출한 함수가 바로 return 되지 않고
백그라운드 작업이 끝나야 return 됩니다.
비동기-논 블로킹 방식에서는 호출한 함수가 바로 return 되어 다음 작업으로 넘어가며, 백그라운드 작업 완료 여부는
신경 쓰지 않고 나중에 백그라운드가 알림을 줄 때 비로소 처리합니다.

readFileSync 메서드를 사용하면 요청이 수백 개 이상 들어올 때 성능에 문제가 생깁니다. Sync 메서드를 사용하면
이전 작업이 완료되어야 다음 작업을 진행할 수 있습니다.
그래서 메인 스레드가 일을 하지 않고 노는 시간이 생기므로 비효율적입니다.
동기 메서드들은 이름 뒤에 Sync가 붙어 있어 구분하기 쉽습니다. writeFileSync도 있습니다.
하지만 동기 메서드를 사용해야 하는 경우는 극히 드뭅니다.
프로그램을 처음 실행할 때 초기화 용도로만 사용하는 것을 권장합니다.
대부분의 경우에는 비동기 메서드가 훨씬 더 효율적입니다.

노드의 버퍼와 스트림은 비슷한 개념입니다. 노드는 파일을 읽을 때 메모리에 파일 크기만큼 공간을 마련해두며
파일 데이터를 메모리에 저장한 뒤 사용자가 조작할 수 있도록 합니다. 이때 메모리에 저장된 데이터가 바로 버퍼입니다.

스레드풀은 실행할 때마다 시간과 순서가 달라집니다. 스레드풀이 작업을 동시에 처리하므로 여덟 개의 작업 중에서 어느 것이 먼저 처리될지 모릅니다.
하지만 하나의 규칙이 있습니다.
1~4와 5~8이 그룹으로 묶여져 있고, 스레드풀이 네 개이므로 처음 네 작업이 동시에 실행되고, 그것들이
종료되면 다음 네 개의 작업이 실행됩니다.
